#!/usr/bin/env groovy

pipeline {
    agent any
    environment {
        shortGitCommit = env.GIT_COMMIT.take(7)
    }
    stages {

        stage('check java') {
            steps {
                script {
                    sh "java -version"
                }
            }
        }

        stage('Bump Version') {
            steps {
                script {
                    sh "./mvnw versions:set -DnewVersion=${shortGitCommit}"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'SonarQube'
//                 withSonarQubeEnv("sonar.dev.worx.id") {
//                     sh "./mvnw clean verify sonar:sonar -Dsonar.projectKey=nle_connect"
//                 }
            }
        }

        stage('clean') {
            steps {
                script {
                    sh "chmod +x mvnw"
                    sh "./mvnw -ntp clean"
                }
            }
        }

        stage('update secret') {
            steps {
                withCredentials([
                    string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
//                    usernamePassword(credentialsId: 'FTPCredentials', passwordVariable: 'FTP_PASSWORD', usernameVariable: 'FTP_USERNAME'),
                    string(credentialsId: 'DB_HOST', variable: 'DB_HOST'),
                    string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME')
                    ]) {
                    sh """
                        cd src/main/resources
                        export DB_PASSWORD=$DB_PASSWORD
//                        export FTP_USERNAME=$FTP_USERNAME
//                        export FTP_PASSWORD=$FTP_PASSWORD
                        export DB_HOST=$DB_HOST
                        export DB_USERNAME=$DB_USERNAME
                        envsubst < application.yml > application_tmp.yml
                        mv application_tmp.yml application.yml
                    """
                }
            }
        }

        stage('Packaging') {
            steps {
                script {
                    sh "./mvnw clean install -DskipTests"
                }
            }
        }

        stage('Build docker image & update compose file') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                        if (env.BRANCH_NAME == "main") {
                            sh """
                                cp Dockerfile target/
                                cd target/
                                docker image build --build-arg JAR_FILE=simpleprogram.jar -t simpleprogram:${shortGitCommit} .
                                cd ../
                                export VERSION=${shortGitCommit}
                                export DB_PASSWORD=$DB_PASSWORD
                                cd src/main/docker/
                                envsubst < docker-compose-template1.yml > docker-compose.yml
                            """
                        }
                    }
                }
            }
        }

        stage('Stop current backend') {
            steps {
                script {
                    if (env.BRANCH_NAME == "main") {
                        sh """
                            cd src/main/docker/
                            docker-compose -p stage down
                        """
                    }
                }
            }
        }

        stage('Start backend with new version') {
            steps {
                script {
                    if (env.BRANCH_NAME == "main") {
                    sh """
                        cd src/main/docker/
                        docker-compose -p stage up -d
                    """
                    }
                }
            }
        }
    }
}
